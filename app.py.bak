import dash
from dash import html, dcc, Input, Output, State
from typing import Dict

from flowfunc import Flowfunc
from flowfunc.config import Config
from flowfunc.jobrunner import JobRunner
from flowfunc.models import OutNode

# --- App Initialization ---
# This setup correctly points to the 'assets' folder for CSS and allows for a multi-page app.
app = dash.Dash(__name__, assets_folder='assets', suppress_callback_exceptions=True)
app.title = "Qflow"

# --- Node Editor Configuration ---
# Defines the functions that can be used as nodes in the editor.
def add(a: int, b: int) -> int:
    """Add two numbers"""
    return a + b

def subtract(a: int, b: int) -> int:
    """Find difference between two numbers"""
    return a - b

nodeeditor_config = Config.from_function_list([add, subtract])
runner = JobRunner(nodeeditor_config)

# --- Page Layouts ---

# 1. Landing Page Layout
# This is the modern, welcoming page for your application.
landing_page_layout = html.Div(className="container", children=[
    html.Header(className="header", children=[
        html.Div("Qflow", className="logo"),
        html.Nav(className="main-nav", children=[
            html.A("Features", href="#features"),
            html.A("Pricing", href="#pricing"),
            html.A("Contact", href="#contact"),
        ]),
        dcc.Link("Launch App", href="/editor", className="button-primary"),
    ]),
    html.Section(className="hero", children=[
        html.H1("Where Quantum Meets Workflow", className="hero-title"),
        html.P("Qflow is a revolutionary visual development environment that simplifies quantum computing. Design, simulate, and deploy complex quantum circuits with unparalleled ease.", className="hero-subtitle"),
        html.Div(className="hero-cta", children=[
            dcc.Link("Get Started for Free", href="/editor", className="button-accent"),
            html.A("Learn More", href="#features", className="button-secondary"),
        ]),
        html.Div(className="hero-image", children=[
            html.Img(src="https://i.imgur.com/eB3Z6g6.png", alt="Qflow Node Editor Screenshot")
        ])
    ]),
    html.Section(id="features", className="features", children=[
        html.H2("A New Paradigm in Quantum Development", className="section-title"),
        html.Div(className="features-grid", children=[
            html.Div(className="feature-card", children=[
                html.Div("‚ú®", className="feature-icon"),
                html.H3("Intuitive Visual Editor", className="feature-title"),
                html.P("Drag, drop, and connect nodes to build quantum circuits. No more boilerplate code, just pure logic.", className="feature-description"),
            ]),
            html.Div(className="feature-card", children=[
                html.Div("üöÄ", className="feature-icon"),
                html.H3("Powerful Simulation", className="feature-title"),
                html.P("Test and debug your algorithms in real-time with our high-performance quantum simulator.", className="feature-description"),
            ]),
            html.Div(className="feature-card", children=[
                html.Div("üåê", className="feature-icon"),
                html.H3("Cloud Integration", className="feature-title"),
                html.P("Seamlessly deploy your circuits to leading quantum hardware providers with a single click.", className="feature-description"),
            ]),
        ])
    ]),
    html.Footer(className="footer", children=[
        html.P("¬© 2025 Qflow. All rights reserved."),
        html.Div(className="footer-links", children=[
            html.A("Privacy Policy", href="#"),
            html.A("Terms of Service", href="#"),
        ])
    ])
])

# 2. Node Editor Page Layout
# This layout provides a stable container for the Flowfunc component to render correctly.
editor_layout = html.Div([
    # Header bar
    html.Div(style={'padding': '10px', 'background-color': '#1F2937', 'color': 'white', 'display': 'flex', 'justifyContent': 'space-between', 'alignItems': 'center', 'height': '60px'}, children=[
        html.H1("Qflow Editor"),
        html.Button(id="btn_run", children="Run", style={'backgroundColor': '#38BDF8', 'border': 'none', 'color': '#111827', 'padding': '10px 20px', 'borderRadius': '5px', 'cursor': 'pointer', 'fontWeight': 'bold'}),
    ]),
    
    # Main content area for the node editor
    html.Div(style={'position': 'relative', 'height': 'calc(100vh - 120px)'}, children=[
         Flowfunc(
            id="nodeeditor",
            config=nodeeditor_config.dict(),
            style={'height': '100%', 'width': '100%'} # Style to fill its parent container
        )
    ]),

    # Output area at the bottom
    html.Div(id="output", style={'padding': '10px', 'backgroundColor': '#111827', 'color': 'white', 'height': '60px', 'overflowY': 'auto'}),
])


# --- Main App Layout & Routing ---
# This section handles switching between the landing page and the editor.
app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Div(id='page-content')
])

@app.callback(Output('page-content', 'children'),
              Input('url', 'pathname'))
def display_page(pathname):
    if pathname == '/editor':
        return editor_layout
    else:
        return landing_page_layout

# --- Node Editor Callback ---
# This function runs the logic when the "Run" button is clicked.
@app.callback(
    Output("output", "children"),
    Input("btn_run", "n_clicks"),
    State("nodeeditor", "nodes"),
)
def run_nodes(nclicks: int, output_nodes: Dict[str, OutNode]):
    if not nclicks:
        return ""
    result = runner.run(output_nodes)
    output = []
    for node in result.values():
        output.append(
            html.Div([html.H3(f"{node.type}: {node.id}", style={'fontSize': '1rem', 'display': 'inline', 'marginRight': '10px'}), 
                      html.P(str(node.result), style={'display': 'inline'})])
        )
    return output


# --- Run the App ---
if __name__ == "__main__":
    app.run(debug=True)